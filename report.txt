'''EightPuzzleWithHeuristics.py
TianYang Jin, Sheng Chen
The problem being formulated is Sliding Blocks of 10 pieces. The pieces consists of four types, 1x1, 2x1, 1x2, and 2x2.
Here is a rough drawing of the Initial state and a representation of the goal state:

1 2 2 7                            . . . .
1 2 2 8                            . . . .
3 5 5 9            ------->        . . . .
3 4 6 10                           . 2 2 .
0 4 6 0                            . 2 2 .

The goal of this game is to get the 2x2 block to the shown position, all other pieces' positions don't matter.
But the piece can only move to an empty space (represented by 0) and it can only move if the space can fit.

In this program, each state of the board is represented by a simple GUI interface produced using the package Tkinter.
It took the ASar search algorithm about 160s to solve the problem using the 'combined_min' heuristic function, and it
displays the solution path at then end using the same simple GUI interface. 
CSE 415, Spring 2016, University of Washington
Instructor: S. Tanimoto.
'''

Here’s the simple version of the solution path produced using the ‘combined_min’ heuristic function
#h_combined_min
Solution path:   
1 2 2 7 
1 2 2 8 
3 5 5 9 
3 4 6 10 
0 4 6 0 

1 2 2 7 
1 2 2 8 
0 5 5 9 
3 4 6 10 
3 4 6 0 

1 2 2 7 
1 2 2 8 
5 5 0 9 
3 4 6 10 
3 4 6 0 

1 2 2 7 
1 2 2 8 
5 5 9 0 
3 4 6 10 
3 4 6 0 

1 2 2 7 
1 2 2 8 
5 5 9 10 
3 4 6 0 
3 4 6 0 

1 2 2 7 
1 2 2 8 
5 5 9 10 
3 4 0 6 
3 4 0 6 

1 2 2 7 
1 2 2 8 
5 5 0 10 
3 4 9 6 
3 4 0 6 

1 2 2 7 
1 2 2 8 
5 5 10 0 
3 4 9 6 
3 4 0 6 

1 2 2 7 
1 2 2 8 
5 5 10 0 
3 4 0 6 
3 4 9 6 

1 2 2 7 
1 2 2 8 
5 5 0 0 
3 4 10 6 
3 4 9 6 

1 2 2 7 
1 2 2 8 
0 5 5 0 
3 4 10 6 
3 4 9 6 

1 2 2 7 
1 2 2 8 
0 0 5 5 
3 4 10 6 
3 4 9 6 

1 2 2 7 
1 2 2 8 
0 4 5 5 
3 4 10 6 
3 0 9 6 

1 2 2 7 
1 2 2 8 
0 4 5 5 
3 4 10 6 
3 9 0 6 

1 2 2 7 
1 2 2 8 
3 4 5 5 
3 4 10 6 
0 9 0 6 

1 2 2 7 
1 2 2 8 
3 4 5 5 
3 4 10 6 
9 0 0 6 

1 2 2 7 
1 2 2 8 
3 0 5 5 
3 4 10 6 
9 4 0 6 

1 2 2 7 
1 2 2 8 
3 5 5 0 
3 4 10 6 
9 4 0 6 

1 2 2 7 
1 2 2 8 
3 5 5 6 
3 4 10 6 
9 4 0 0 

1 2 2 7 
1 2 2 8 
3 5 5 6 
3 4 0 6 
9 4 10 0 

1 2 2 7 
1 2 2 8 
3 5 5 6 
3 4 0 6 
9 4 0 10 

1 2 2 7 
1 2 2 8 
3 5 5 6 
3 0 4 6 
9 0 4 10 

1 2 2 7 
1 2 2 8 
3 5 5 6 
3 0 4 6 
0 9 4 10 

1 2 2 7 
1 2 2 8 
0 5 5 6 
3 0 4 6 
3 9 4 10 

1 2 2 7 
1 2 2 8 
5 5 0 6 
3 0 4 6 
3 9 4 10 

1 2 2 7 
1 2 2 8 
5 5 4 6 
3 0 4 6 
3 9 0 10 

1 2 2 7 
1 2 2 8 
5 5 4 6 
3 0 4 6 
3 9 10 0 

1 2 2 7 
1 2 2 8 
5 5 4 6 
3 9 4 6 
3 0 10 0 

1 2 2 7 
1 2 2 8 
5 5 4 6 
3 9 4 6 
3 10 0 0 

1 2 2 7 
1 2 2 8 
5 5 0 6 
3 9 4 6 
3 10 4 0 

1 2 2 7 
1 2 2 8 
0 5 5 6 
3 9 4 6 
3 10 4 0 

1 2 2 7 
1 2 2 8 
0 5 5 0 
3 9 4 6 
3 10 4 6 

1 2 2 7 
1 2 2 8 
0 0 5 5 
3 9 4 6 
3 10 4 6 

1 2 2 7 
1 2 2 8 
3 0 5 5 
3 9 4 6 
0 10 4 6 

1 2 2 7 
1 2 2 8 
3 0 5 5 
3 9 4 6 
10 0 4 6 

1 2 2 7 
1 2 2 8 
3 0 5 5 
3 0 4 6 
10 9 4 6 

1 2 2 7 
1 2 2 8 
0 3 5 5 
0 3 4 6 
10 9 4 6 

0 2 2 7 
1 2 2 8 
1 3 5 5 
0 3 4 6 
10 9 4 6 

0 2 2 7 
0 2 2 8 
1 3 5 5 
1 3 4 6 
10 9 4 6 

2 2 0 7 
2 2 0 8 
1 3 5 5 
1 3 4 6 
10 9 4 6 

2 2 7 0 
2 2 0 8 
1 3 5 5 
1 3 4 6 
10 9 4 6 

2 2 7 8 
2 2 0 0 
1 3 5 5 
1 3 4 6 
10 9 4 6 

2 2 7 8 
2 2 5 5 
1 3 0 0 
1 3 4 6 
10 9 4 6 

2 2 7 8 
2 2 5 5 
1 3 4 0 
1 3 4 6 
10 9 0 6 

2 2 7 8 
2 2 5 5 
1 3 4 0 
1 3 4 6 
10 0 9 6 

2 2 7 8 
2 2 5 5 
1 3 4 0 
1 3 4 6 
0 10 9 6 

2 2 7 8 
2 2 5 5 
0 3 4 0 
1 3 4 6 
1 10 9 6 

2 2 7 8 
2 2 5 5 
0 3 4 6 
1 3 4 6 
1 10 9 0 

2 2 7 8 
2 2 5 5 
0 3 4 6 
1 3 4 6 
1 10 0 9 

2 2 7 8 
2 2 5 5 
0 3 4 6 
1 3 4 6 
1 0 10 9 

2 2 7 8 
2 2 5 5 
0 0 4 6 
1 3 4 6 
1 3 10 9 

0 0 7 8 
2 2 5 5 
2 2 4 6 
1 3 4 6 
1 3 10 9 

0 7 0 8 
2 2 5 5 
2 2 4 6 
1 3 4 6 
1 3 10 9 

0 7 8 0 
2 2 5 5 
2 2 4 6 
1 3 4 6 
1 3 10 9 

7 0 8 0 
2 2 5 5 
2 2 4 6 
1 3 4 6 
1 3 10 9 

7 8 0 0 
2 2 5 5 
2 2 4 6 
1 3 4 6 
1 3 10 9 

7 8 5 5 
2 2 0 0 
2 2 4 6 
1 3 4 6 
1 3 10 9 

7 8 5 5 
2 2 4 0 
2 2 4 6 
1 3 0 6 
1 3 10 9 

7 8 5 5 
2 2 4 0 
2 2 4 6 
1 3 10 6 
1 3 0 9 

7 8 5 5 
2 2 4 0 
2 2 4 6 
1 3 10 6 
1 3 9 0 

7 8 5 5 
2 2 4 0 
2 2 4 0 
1 3 10 6 
1 3 9 6 

7 8 5 5 
2 2 0 4 
2 2 0 4 
1 3 10 6 
1 3 9 6 

7 8 5 5 
0 2 2 4 
0 2 2 4 
1 3 10 6 
1 3 9 6 

7 8 5 5 
0 2 2 4 
1 2 2 4 
1 3 10 6 
0 3 9 6 

7 8 5 5 
1 2 2 4 
1 2 2 4 
0 3 10 6 
0 3 9 6 

7 8 5 5 
1 2 2 4 
1 2 2 4 
3 0 10 6 
3 0 9 6 

7 8 5 5 
1 2 2 4 
1 2 2 4 
3 0 10 6 
3 9 0 6 

7 8 5 5 
1 2 2 4 
1 2 2 4 
3 0 0 6 
3 9 10 6 

7 8 5 5 
1 0 0 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

7 0 5 5 
1 8 0 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

0 7 5 5 
1 8 0 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

0 7 5 5 
1 0 8 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

0 0 5 5 
1 7 8 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

0 5 5 0 
1 7 8 4 
1 2 2 4 
3 2 2 6 
3 9 10 6 

0 5 5 4 
1 7 8 4 
1 2 2 0 
3 2 2 6 
3 9 10 6 

0 5 5 4 
1 7 8 4 
1 2 2 6 
3 2 2 6 
3 9 10 0 

1 5 5 4 
1 7 8 4 
0 2 2 6 
3 2 2 6 
3 9 10 0 

1 5 5 4 
1 7 8 4 
3 2 2 6 
3 2 2 6 
0 9 10 0 

1 5 5 4 
1 7 8 4 
3 2 2 6 
3 2 2 6 
0 9 0 10 

1 5 5 4 
1 7 8 4 
3 2 2 6 
3 2 2 6 
9 0 0 10 

1 5 5 4 
1 7 8 4 
3 0 0 6 
3 2 2 6 
9 2 2 10 

Length of the solution path: 80
9965 states examined.
Time duration: 160.7

It took too long for the Breadth First Search program to solve this problem with this initial state. BFS can only solve really simple initial states. 

Here is a output produced by using BFS on simple initial state. 

Welcome to ItrBreathFS
Initial State:
0 5 5 3 
1 7 8 3 
1 2 2 6 
4 2 2 6 
4 9 10 0 

Solution path: 
0 5 5 3 
1 7 8 3 
1 2 2 6 
4 2 2 6 
4 9 10 0 

0 5 5 3 
1 7 8 3 
1 2 2 6 
4 2 2 6 
4 9 0 10 

1 5 5 3 
1 7 8 3 
0 2 2 6 
4 2 2 6 
4 9 0 10 

1 5 5 3 
1 7 8 3 
4 2 2 6 
4 2 2 6 
0 9 0 10 

1 5 5 3 
1 7 8 3 
4 2 2 6 
4 2 2 6 
9 0 0 10 

1 5 5 3 
1 7 8 3 
4 0 0 6 
4 2 2 6 
9 2 2 10 

6
43 states examined.


main Python file: AStar.py, ItrBreadthFS.py SlidingBlocksProblem.py testInitialState.py
heuristics functions: h_combined_min(s), h_BlocksInTheWay(s), h_force(s)

example test run command:
pyhton3 AStar.py SlidingBlocksProblem h_combined_min testInitialState.py
python3 ItrBreadthFS.py SlidingBlocksProblem

Approach to formulating the problem:
First we wrote all four kinds of operations that can possibly happen. Each one for 1x1, 1x2, 2x1, and 2x2 sized blocks. 
Then we wrote the can_move function, which detects whether it’s safe to make a move. Specifically, it detects whether the next indices are legal; and whether the next indices are empty. 
After that, we wrote the move function, which simply make a specified move.
The heuristics functions came next. There are three different types of heuristics functions. The first one is called h_BlocksInTheWay, which calculates the number of different types of blocks that are between the 2x2 block and goal. The second one is called h_force, which just calculate the difference between the 2x2 block and the goal. (abs(x-x_goal)+abs(y-y_goal) The third one is called h_combined_min, which not only calculated the distance as h_force, but it adds on all the distances between 1x1 blocks and the 2x2 block. This is because, we did an Internet search on how to solve Sliding Blocks Problems and some suggested that the closer the 1x1 blocks are with the 2x2 block, the better. 
After test run with all three heuristics functions, the results showed that h_combined_min does perform a little bit better than other two (~1500 states examined less). We think this might be because of the closer the 1x1 blocks are with the 2x2 block, the easier for the 2x2 block to make it’s move because the 1x1 blocks are the most free block. 


Retrospective:
(a)
TianYang Jin: AStar function modification, can_move, move, three heuristics functions, Describe_state
Shang Chen: AStar function modification, can_move, operators. 
(b)
TianYang: I learned how to formulate a given puzzle and using AStar search method to solve it.  